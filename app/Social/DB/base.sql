DROP DATABASE IF EXISTS CAGLIOLO_DB;
CREATE DATABASE CAGLIOLO_DB;
USE CAGLIOLO_DB;
/**************** USUARIOS *****************/
CREATE TABLE IF NOT EXISTS usuarios(
  ID_USUARIOS INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
  NOMBRE VARCHAR(50) NOT NULL,
  APELLIDO VARCHAR(50) NOT NULL,
  EMAIL VARCHAR(100) NOT NULL UNIQUE,
  CLAVE VARCHAR(150) NOT NULL,
  FECHA_NACIMIENTO DATE NOT NULL,
  FKSEXO TINYINT(1) UNSIGNED NOT NULL,
  IMAGEN VARCHAR(500) UNIQUE,
  FKESTUDIOS TINYINT(1),
  DESCRIPCION TEXT,
  FECHA_ALTA DATETIME,

  FOREIGN KEY (FKSEXO) REFERENCES sexo (ID_SEXO),
  FOREIGN KEY (FKESTUDIOS) REFERENCES estudios (ID_ESTUDIOS)
);
INSERT INTO usuarios ( NOMBRE, APELLIDO, EMAIL, CLAVE, FECHA_NACIMIENTO, FKSEXO, IMAGEN, FKESTUDIOS, DESCRIPCION )
VALUES ('Franco', 'Cagliolo', 'cagliolo@gmail.com', 'asd123', '1994/07/19', 1, 'perfil.jpg', 4, 'Soy alumno de DaVinci y de la UBA'),
('Lisandro', 'Lopez', 'ellicha@gmail.com', 'asd123', '1994/07/19', 1, 'DEFE.jpg', 4, 'Juego en Racing CLub' );

/****************** SEXOS **********************/
CREATE TABLE IF NOT EXISTS sexo(
  ID_SEXO TINYINT(1) UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
  SEXO VARCHAR(10) UNIQUE NOT NULL

);
INSERT INTO sexo( SEXO )
VALUES ('Masculino'), ('Femenino');
/************************* ESTUDIOS ****************/
CREATE TABLE IF NOT EXISTS estudios(
  ID_ESTUDIOS TINYINT(1) UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
  ESTUDIOS VARCHAR(100) NOT NULL
);
INSERT INTO estudios( ESTUDIOS )
VALUES ('Primarios'), ('Secundarios'), ('Terciarios'), ('Universitarios');

CREATE TABLE IF NOT EXISTS posts(
  ID_POSTS INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
  IMAGEN VARCHAR(400) UNIQUE,
  DESCRIPCION VARCHAR (300) NOT NULL,
  FECHA_ALTA DATETIME

);

CREATE TABLE comentarios(
 ID_COMENTARIOS INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
 FKPOSTS INT UNSIGNED,
 FKUSUARIO INT UNSIGNED,
 COMENTARIOS VARCHAR(300),
 FECHA_ALTA DATETIME,

 FOREIGN KEY(FKUSUARIO) REFERENCES usuarios(ID_USUARIOS),
 FOREIGN KEY(FKPOSTS) REFERENCES
 posts(ID_POSTS) ON DELETE CASCADE
);
